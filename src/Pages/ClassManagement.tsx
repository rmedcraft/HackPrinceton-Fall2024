import { useState, useEffect } from 'react';
import { ChevronDown, ChevronUp, Users } from 'lucide-react';
import '../ClassManagement.css';
import { Link } from 'react-router-dom';
import axios from 'axios';

type Student = {
  id: string;  // Assuming the id is a string (MongoDB ObjectID)
  name: string;
  interests: string[];
};

const ClassManagement = () => {
  const [students, setStudents] = useState<Student[]>([]);
  const [newStudentName, setNewStudentName] = useState("");
  const [newStudentInterests, setNewStudentInterests] = useState("");
  const [expandedStudent, setExpandedStudent] = useState<number | null>(null);
  const [errorMessage, setErrorMessage] = useState("");

  // Fetch the students from the database when the component mounts
  useEffect(() => {
    const fetchStudents = async () => {
      try {
        const response = await axios.get('http://localhost:3000/class-management');
        setStudents(response.data); // Assuming the server returns an array of students
      } catch (error) {
        console.error("Error fetching students:", error);
      }
    };

    fetchStudents();
  }, []);

  const toggleStudent = (studentId: number) => {
    setExpandedStudent(expandedStudent === studentId ? null : studentId);
  };

  const handleAddStudent = async () => {
    if (newStudentName && newStudentInterests) {
      const newStudent: Student = {
        id: "",  // The ID will be generated by the server
        name: newStudentName,
        interests: newStudentInterests.split(',').map(interest => interest.trim())
      };

      try {
        // Send the new student data to the server to be saved in the database
        const response = await axios.post('http://localhost:3000/class-management', {
          name: newStudent.name,
          interests: newStudent.interests
        });

        // Add the new student to the state with the generated ID
        setStudents([...students, { ...newStudent, id: response.data.id }]);

        // Clear input fields and reset the error message
        setNewStudentName("");
        setNewStudentInterests("");
        setErrorMessage("");
      } catch (error) {
        setErrorMessage("Failed to add student. Please try again.");
      }
    } else {
      setErrorMessage("Please fill in both fields.");
    }
  };

  return (
    <>
      <Link to={"/home"}>
        <h2 className="backButton">
          <i className="bi bi-arrow-left-square-fill"></i>
        </h2>
      </Link>
      <div className="class-management">
        <div className="management-card">
          <div className="management-header">
            <Users size={20} color="white" />
            <h1>Class Management</h1>
          </div>

          <div className="students-container">
            <div className="students-list">
              {students.map((student, index) => (
                <div key={student.id} className="student-card">
                  <button
                    onClick={() => toggleStudent(index)}
                    className="student-button"
                  >
                    <span>{student.name}</span>
                    {expandedStudent === index ? (
                      <ChevronUp size={20} color="white" />
                    ) : (
                      <ChevronDown size={20} color="white" />
                    )}
                  </button>

                  {expandedStudent === index && (
                    <div className="interests-section">
                      <div className="interests-header">Interests:</div>
                      <div className="interests-list">
                        {student.interests.map((interest, i) => (
                          <span key={i} className="interest-tag">
                            {interest}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Add New Student Section */}
          <div className="add-student">
            <h3>Add New Student</h3>
            <div className="input-group">
              <input
                type="text"
                placeholder="Student Name"
                value={newStudentName}
                onChange={(e) => setNewStudentName(e.target.value)}
              />
              <input
                type="text"
                placeholder="Comma-separated Interests"
                value={newStudentInterests}
                onChange={(e) => setNewStudentInterests(e.target.value)}
              />
            </div>
            <button onClick={handleAddStudent}>Add Student</button>

            {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}
          </div>
        </div>
      </div>
    </>
  );
};

export default ClassManagement;
